{"version":3,"sources":["../../../src/components/GiphyList/test.js"],"names":["describe","test","spy","jest","spyOn","GiphyList","prototype","wrapper","shallow","expect","toHaveBeenCalled","mockReset","mockRestore","render","giphyData","toMatchSnapshot","customTheme","list","listScrollbar","listScrollbarThumb","listMasonry","listItem","listEntry","listEntryImage","Object","keys","every","key","find","length","toBe","customRenderEntry","fn","onEntrySelect","mount","simulate"],"mappings":";;;;AAAA;;AACA;;AAEAA,QAAQ,CAAC,eAAD,EAAkB,YAAM;AAC9BC,EAAAA,IAAI,CAAC,kBAAD,EAAqB,YAAM;AAC7B,QAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,eAAUC,SAArB,EAAgC,QAAhC,CAAZ;AACA,QAAMC,OAAO,GAAGC,OAAO,eACrB,oBAAC,cAAD;AAAW,MAAA,KAAK,EAAE,EAAlB;AAAsB,MAAA,YAAY,EAAE,wBAAM,CAAE;AAA5C,MADqB,CAAvB;AAGAC,IAAAA,MAAM,CAACP,GAAD,CAAN,CAAYQ,gBAAZ;AACAR,IAAAA,GAAG,CAACS,SAAJ;AACAT,IAAAA,GAAG,CAACU,WAAJ;AACD,GARG,CAAJ;AAUAX,EAAAA,IAAI,CAAC,gBAAD,EAAmB,YAAM;AAC3B,QAAMM,OAAO,GAAGM,MAAM,eACpB,oBAAC,cAAD;AAAW,MAAA,KAAK,EAAEC,kBAAlB;AAA6B,MAAA,YAAY,EAAE,wBAAM,CAAE;AAAnD,MADoB,CAAtB;AAGAL,IAAAA,MAAM,CAACF,OAAD,CAAN,CAAgBQ,eAAhB;AACD,GALG,CAAJ;AAOAd,EAAAA,IAAI,CAAC,kBAAD,EAAqB,YAAM;AAC7B,QAAMe,WAAW,GAAG;AAClBC,MAAAA,IAAI,EAAE,YADY;AAElBC,MAAAA,aAAa,EAAE,qBAFG;AAGlBC,MAAAA,kBAAkB,EAAE,0BAHF;AAIlBC,MAAAA,WAAW,EAAE,mBAJK;AAKlBC,MAAAA,QAAQ,EAAE,gBALQ;AAMlBC,MAAAA,SAAS,EAAE,iBANO;AAOlBC,MAAAA,cAAc,EAAE;AAPE,KAApB;AASA,QAAMhB,OAAO,GAAGM,MAAM,eACpB,oBAAC,cAAD;AACE,MAAA,KAAK,EAAEC,kBADT;AAEE,MAAA,YAAY,EAAE,wBAAM,CAAE,CAFxB;AAGE,MAAA,KAAK,EAAEE;AAHT,MADoB,CAAtB;AAOAP,IAAAA,MAAM,CACJe,MAAM,CAACC,IAAP,CAAYT,WAAZ,EAAyBU,KAAzB,CAA+B,UAAAC,GAAG;AAAA,aAAIpB,OAAO,CAACqB,IAAR,YAAiBZ,WAAW,CAACW,GAAD,CAA5B,GAAqCE,MAAzC;AAAA,KAAlC,CADI,CAAN,CAEEC,IAFF,CAEO,IAFP;AAGD,GApBG,CAAJ;AAsBA7B,EAAAA,IAAI,CAAC,iCAAD,EAAoC,YAAM;AAC5C,QAAM8B,iBAAiB,GAAG5B,IAAI,CAAC6B,EAAL,EAA1B;AACA,QAAMzB,OAAO,GAAGM,MAAM,eACpB,oBAAC,cAAD;AACE,MAAA,KAAK,EAAEC,kBADT;AAEE,MAAA,YAAY,EAAE,wBAAM,CAAE,CAFxB;AAGE,MAAA,WAAW,EAAEiB;AAHf,MADoB,CAAtB;AAOAtB,IAAAA,MAAM,CAACsB,iBAAD,CAAN,CAA0BrB,gBAA1B;AACD,GAVG,CAAJ;AAYAT,EAAAA,IAAI,CAAC,4BAAD,EAA+B,YAAM;AACvC,QAAMgC,aAAa,GAAG9B,IAAI,CAAC6B,EAAL,EAAtB;AACA,QAAMzB,OAAO,GAAG2B,KAAK,eACnB,oBAAC,cAAD;AACE,MAAA,KAAK,EAAEpB,kBADT;AAEE,MAAA,YAAY,EAAE,wBAAM,CAAE,CAFxB;AAGE,MAAA,aAAa,EAAEmB;AAHjB,MADmB,CAArB;AAOA1B,IAAAA,OAAO,CAACqB,IAAR,CAAa,QAAb,EAAuBO,QAAvB,CAAgC,OAAhC;AACA1B,IAAAA,MAAM,CAACwB,aAAD,CAAN,CAAsBvB,gBAAtB;AACD,GAXG,CAAJ;AAYD,CAhEO,CAAR","sourcesContent":["import GiphyList from './index';\nimport giphyData from './helpers/giphyData.json';\n\ndescribe('<GiphyList />', () => {\n  test('render component', () => {\n    const spy = jest.spyOn(GiphyList.prototype, 'render');\n    const wrapper = shallow(\n      <GiphyList items={[]} loadNextPage={() => {}} />\n    );\n    expect(spy).toHaveBeenCalled();\n    spy.mockReset();\n    spy.mockRestore();\n  });\n\n  test('snapshot match', () => {\n    const wrapper = render(\n      <GiphyList items={giphyData} loadNextPage={() => {}} />\n    );\n    expect(wrapper).toMatchSnapshot();\n  });\n\n  test('set custom theme', () => {\n    const customTheme = {\n      list: 'customList',\n      listScrollbar: 'customListScrollbar',\n      listScrollbarThumb: 'customListScrollbarThumb',\n      listMasonry: 'customListMasonry',\n      listItem: 'customListItem',\n      listEntry: 'customListEntry',\n      listEntryImage: 'customListEntryImage',\n    };\n    const wrapper = render(\n      <GiphyList\n        items={giphyData}\n        loadNextPage={() => {}}\n        theme={customTheme}\n      />\n    );\n    expect(\n      Object.keys(customTheme).every(key => wrapper.find(`.${customTheme[key]}`).length)\n    ).toBe(true);\n  });\n\n  test('set custom \"renderEntry\" method', () => {\n    const customRenderEntry = jest.fn();\n    const wrapper = render(\n      <GiphyList\n        items={giphyData}\n        loadNextPage={() => {}}\n        renderEntry={customRenderEntry}\n      />\n    );\n    expect(customRenderEntry).toHaveBeenCalled();\n  });\n\n  test('set \"onEntrySelect\" method', () => {\n    const onEntrySelect = jest.fn();\n    const wrapper = mount(\n      <GiphyList\n        items={giphyData}\n        loadNextPage={() => {}}\n        onEntrySelect={onEntrySelect}\n      />\n    );\n    wrapper.find('button').simulate('click');\n    expect(onEntrySelect).toHaveBeenCalled();\n  })\n});\n"],"file":"test.js"}