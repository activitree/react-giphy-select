{"version":3,"sources":["../../../src/components/GiphySelect/test.js"],"names":["describe","fetch","mockResponse","JSON","stringify","data","pagination","count","offset","total","test","spy","jest","spyOn","GiphySelect","prototype","wrapper","shallow","expect","toHaveBeenCalled","mockReset","mockRestore","toMatchSnapshot","customTheme","select","selectInput","attribution","Object","keys","every","key","find","length","toBe","customPlaceholder","prop"],"mappings":";;;;AAAA;;AAEAA,QAAQ,CAAC,iBAAD,EAAoB,YAAM;AAChCC,EAAAA,KAAK,CAACC,YAAN,CAAmBC,IAAI,CAACC,SAAL,CAAe;AAChCC,IAAAA,IAAI,EAAE,EAD0B;AAEhCC,IAAAA,UAAU,EAAE;AACVC,MAAAA,KAAK,EAAE,CADG;AAEVC,MAAAA,MAAM,EAAE,CAFE;AAGVC,MAAAA,KAAK,EAAE;AAHG;AAFoB,GAAf,CAAnB;AASAC,EAAAA,IAAI,CAAC,kBAAD,EAAqB,YAAM;AAC7B,QAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,eAAYC,SAAvB,EAAkC,QAAlC,CAAZ;AACA,QAAMC,OAAO,GAAGC,OAAO,eACrB,oBAAC,cAAD,OADqB,CAAvB;AAGAC,IAAAA,MAAM,CAACP,GAAD,CAAN,CAAYQ,gBAAZ;AACAR,IAAAA,GAAG,CAACS,SAAJ;AACAT,IAAAA,GAAG,CAACU,WAAJ;AACD,GARG,CAAJ;AAUAX,EAAAA,IAAI,CAAC,gBAAD,EAAmB,YAAM;AAC3B,QAAMM,OAAO,GAAGC,OAAO,eACrB,oBAAC,cAAD,OADqB,CAAvB;AAGAC,IAAAA,MAAM,CAACF,OAAD,CAAN,CAAgBM,eAAhB;AACD,GALG,CAAJ;AAOAZ,EAAAA,IAAI,CAAC,kBAAD,EAAqB,YAAM;AAC7B,QAAMa,WAAW,GAAG;AAClBC,MAAAA,MAAM,EAAE,cADU;AAElBC,MAAAA,WAAW,EAAE,mBAFK;AAGlBC,MAAAA,WAAW,EAAE;AAHK,KAApB;AAKA,QAAMV,OAAO,GAAGC,OAAO,eACrB,oBAAC,cAAD;AAAa,MAAA,KAAK,EAAEM;AAApB,MADqB,CAAvB;AAGAL,IAAAA,MAAM,CACJS,MAAM,CAACC,IAAP,CAAYL,WAAZ,EAAyBM,KAAzB,CAA+B,UAAAC,GAAG;AAAA,aAAId,OAAO,CAACe,IAAR,YAAiBR,WAAW,CAACO,GAAD,CAA5B,GAAqCE,MAAzC;AAAA,KAAlC,CADI,CAAN,CAEEC,IAFF,CAEO,IAFP;AAGD,GAZG,CAAJ;AAcAvB,EAAAA,IAAI,CAAC,iCAAD,EAAoC,YAAM;AAC5C,QAAMwB,iBAAiB,GAAG,MAA1B;AACA,QAAMlB,OAAO,GAAGC,OAAO,eACrB,oBAAC,cAAD;AAAa,MAAA,WAAW,EAAEiB;AAA1B,MADqB,CAAvB;AAGAhB,IAAAA,MAAM,CAACF,OAAO,CAACe,IAAR,CAAa,OAAb,EAAsBI,IAAtB,CAA2B,aAA3B,CAAD,CAAN,CAAkDF,IAAlD,CAAuDC,iBAAvD;AACD,GANG,CAAJ;AAOD,CAhDO,CAAR","sourcesContent":["import GiphySelect from './index';\n\ndescribe('<GiphySelect />', () => {\n  fetch.mockResponse(JSON.stringify({\n    data: [],\n    pagination: {\n      count: 0,\n      offset: 0,\n      total: 0\n    }\n  }));\n\n  test('render component', () => {\n    const spy = jest.spyOn(GiphySelect.prototype, 'render');\n    const wrapper = shallow(\n      <GiphySelect />\n    );\n    expect(spy).toHaveBeenCalled();\n    spy.mockReset();\n    spy.mockRestore();\n  });\n\n  test('snapshot match', () => {\n    const wrapper = shallow(\n      <GiphySelect />\n    );\n    expect(wrapper).toMatchSnapshot();\n  });\n\n  test('set custom theme', () => {\n    const customTheme = {\n      select: 'customSelect',\n      selectInput: 'customSelectInput',\n      attribution: 'customAttribution',\n    };\n    const wrapper = shallow(\n      <GiphySelect theme={customTheme} />\n    );\n    expect(\n      Object.keys(customTheme).every(key => wrapper.find(`.${customTheme[key]}`).length)\n    ).toBe(true);\n  });\n\n  test('set placeholder to search field', () => {\n    const customPlaceholder = 'test';\n    const wrapper = shallow(\n      <GiphySelect placeholder={customPlaceholder} />\n    );\n    expect(wrapper.find('input').prop('placeholder')).toBe(customPlaceholder);\n  })\n});\n"],"file":"test.js"}